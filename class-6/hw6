<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>Display a map</title>
<meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
<script src="https://api.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/@turf/turf@5/turf.min.js"></script>
<!-- üî∞ Using a script tag, link to centroids data file, which lives in the same directory as this file and contains a variable called "centroids" you can reference in your map code -->
<script src='./geojson.js'></script>
<style>
	body { margin: 0; padding: 0; }
	#map { position: absolute; top: 0; bottom: 0; width: 100%; }
  
  /* Style the info box */
  #selectedLocations {
    font-family: Arial, Helvetica, sans-serif;
    position: absolute;
    top: 15px;
    left: 15px;
    /* üî∞ set the background-color to white */
    background: #fff;
    padding: 10px 25px 25px 25px;
    border-radius: 5px;
    max-height: 600px;
    overflow:scroll
    /* üî∞ to avoid making a really long list that runs off the page, set overflow to scroll */
  }
</style>
</head>
<body>
<div id="map"></div>
<div id="selectedLocations">
  <!-- üî∞ Create a heading that says "Selected locations:" -->

    <h2>Selected locations:</h2>
    <div id="bulletsContainer"></div>
  </div>

</div>
<script>
	mapboxgl.accessToken = 'pk.eyJ1IjoiZGFuc3dpY2siLCJhIjoiY2swb2g4Z3hqMGFzYTNjbXdxc3F6dWZlaSJ9.Jo1SOIQUg0JV6HK4wEv36w';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/light-v10',
        center: [-122.4785, 37.7627],
        zoom: 15.6
    });

    

    
    
    // Inside your on('load', ...) callback: add a layer for the search radius, the parcel centroids, and the selected parcels.
    map.on('load', function() {
      // üî∞ Use map.addLayer to create a new layer. This layer will display the search radius.
        // Give your layer an ID of 'search-radius'
        // The source should be of type 'geosjon' and its data should be set to a feature collection without any features. Later on, you will update this layer with the search radius you create when the user clicks on the map.
        // It should be a fill layer. Set whichever paint properties you like.

        
      map.addLayer({
        id: 'search-radius',
        source: {
          type: 'geojson',
          data: { "type": "FeatureCollection", "features": [] }
        },
        type: 'fill',
        paint: {
          'fill-color': '#555',
          'fill-opacity': 0.1
        },
      }, 'country-label');



      // üî∞ Use map.addLayer to add your parcel centroids GeoJSON as another layer
        // Give this layer an ID of 'centroids'
        // This layer should also be of type 'geojson', but its data property should be set to the variable centroids. 
        // It should be a "circle" layer. Set whichever paint properties you like.
        //

        
        map.addLayer({
        id: 'centroids',
        source: {
          type: 'geojson',
          data: centroids
        },
        type: 'circle',
        paint: {
          'circle-color': 'dodgerblue',
          'circle-radius': 2,
          'circle-opacity': 0.5
        },
      }, 'country-label');







        /**************************
         * [üìù PROMPT 1] Describe where the centroids variable comes from. How is it possible for you to reference this variable when you didn't declare it?
        ***************************/

      // üî∞ Use map.addLayer to add another empty layer to house the parcel centroids that the user will select. 
      // Creating another layer allows you to style the selected centroids in a way that is distinct form the unselected ones.
        // Give this layer an ID of 'centroids-selected'

        map.addLayer({
        id: 'centroids-selected',
        source: {
          type: 'geojson',
          data: { "type": "FeatureCollection", "features": [] }
        },
        type: 'fill',
        type: 'circle',
        paint: {
          'circle-color': 'dodgerblue',
          'circle-radius': 2,
          'circle-opacity': 0.5
        },
    });





        //
        // This layer should also be of type 'geojson' and its data should be set to a feature collection without any features.
        // Later on, when the user clicks on the map, you will set this layer's data to the collection of features within a given
        // radius of the click.
        //
        // It should be a 'circle' layer. Set whichever paint properties you like.
        //
        /**************************
         * [üìù PROMPT 2] Why might you want to create the 'centroids-selected' layer after you've created the 'centroids' layer?
        ***************************/

    });

    //üî∞ Create a new marker. Later, when the user clicks on the map, set the marker's location
    // right where the user clicked.
    //

    var marker = new mapboxgl.Marker({ color: "#008000" });



    /**************************
     * [üìù PROMPT 3] Should you set the marker's lngLat and add it to the map? Why or why not?
    ***************************/
    

    //üî∞ Create an event listener that listens for clicks on the map

    map.on('click', function (e) {
      var clickedLngLat = [e.lngLat.lng, e.lngLat.lat];
      marker.setLngLat(clickedLngLat).addTo(map);
      var searchRadius = makeRadius(clickedLngLat, 200);
      //var featuresInBuffer = spatialJoin(centroids, searchRadius);
      map.getSource('search-radius').setData(searchRadius);
      var selectedpoints = pip(centroids, searchRadius);
      map.getSource('centroids-selected').setData(selectedpoints);
      buildLocationsList(selectedpoints, 'bulletsContainer')
     
    });
    
      // üî∞ Store the lngLat associated with the click event as a variable called clickedLngLat
      

      //üî∞ When a click occurs, set the marker's [lng, lat] to the location of the click
      // Add the marker to the map.
      

      //üî∞ Create a variable called searchRadius and assign its value to:
        // Call the makeRadius() utility function to generate a 200 meter search radius.
      

      //üî∞ Get the search-radius source. Set its data to the radius created in the previous step.
      // Here is an example you can reference: https://docs.mapbox.com/mapbox-gl-js/api/#geojsonsource
      

      //üî∞ Create a variable called selectedPoints and assign its value to:
        // Call the pip() utility function with the appropriate arguments.
            /**************************
             * [üìù PROMPT 4] How did you know which arguments to pass to the pip() function?

            When I typed in pip, an informational box popped up and specified which arguments to pass. 


            ***************************/
      

      //üî∞ Get the centroids-selected source. Set its data to the selected points created in the previous step.
      

      //üî∞ Call the buildLocationsList utility function with the appropriate arguments.
      


    /****** UTILITY FUNCTIONS *******/

    /**
     * Generates a circular polygon of a given radius round a given point.
     * lngLatArray {array} - The longitude, latitude coordinates to be used as the center of the circle.
     * radiusInMeters {number} - The radius, in meters, of the circle.
     *
     * Returns a GeoJSON polygon.
     */
     function makeRadius(lngLatArray, radiusInMeters) {

      var point = turf.point(lngLatArray);
     
      var buffered = turf.buffer(point, radiusInMeters, { units: 'meters' });

      return buffered;
    }
    

   


      //üî∞ Create a variable called point and assign its value to:
        // use turf.point() to generate a GeoJSON point from lngLatArray.
        // https://turfjs.org/docs/#point

      
      //üî∞ Create a variable called buffered. Assign its value to:
        // Use turf's buffer function to make a polygon that around the clicked point
        // https://turfjs.org/docs/#buffer
      

      //üî∞ Return the buffered feature
      
    

    /**
     * Generates a featureCollection of points that fall within a given polygon.
     * pointsFeatureCollection {object} - A GeoJSON FeatureCollection containing a set of points.
     * polygon {object} - A GeoJSON polygon.
     * 
     * Returns a GeoJSON FeatureCollection.
     */
    function pip(pointsFeatureCollection, polygon) {
      //üî∞ Create a variable called selectedPoints and set its value to:
        // use turf.pointsWithinPolygon to find the points that fall within a given polygon.
        // https://turfjs.org/docs/#pointsWithinPolygon
        var selectedpoints = turf.pointsWithinPolygon(pointsFeatureCollection, polygon) //what polygon am I loookin for here?
        return selectedpoints 

      //üî∞ Return selectedPoints
      
    }

    /**
     * Generates a textual list of locations and puts that list inside an HTML container.
     * selectedPoints {object} - A GeoJSON FeatureCollection containing a set of points.
     * containerId {string} - The ID of the container into which the location list should be placed.
     */
    function buildLocationsList(selectedPoints, containerId) {
      //üî∞ Use document.getElementById to get the element with the ID passed to this function.
      // Create a variable called container and assign the above to it.
      var listContainer = document.getElementById('bulletsContainer');
      
      var pointBullets = selectedPoints.features.map(function(point) {
        // Some of the parcel data doesn't have full addresses. 
        // The following line checks if the current point has a value in its to_st property. If the address value exists,
        // construct a line item with the address value. If not, construct a line item with the parcel number instead.
        if (point.properties.to_st) {
          return "<li>Address: " + point.properties.to_st + ' ' + point.properties.street + ' ' + point.properties.st_type + "</li>";
        } else {
          return "<li>Parcel number: " + point.properties.blklot + "</li>";
        }
      });

      var bulletsList = '<ul>' + pointBullets.join('') +'</ul>'

      listContainer.innerHTML = bulletsList;

    
    }

      // üî∞ Create a variable called bulletsList.
      // Using the logic in the previous loop as a model, wrap the pointBullets list in an unordered list: https://www.w3schools.com/html/html_lists.asp
      // Hint: you can use join('') to turn the pointBullets array into a single string: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join

    
        


      

      // üî∞ Assign the container's innerHTML to the value of the bulletsList variable you just created. https://www.w3schools.com/jsref/prop_html_innerhtml.asp



      
</script>

</body>
</html>
