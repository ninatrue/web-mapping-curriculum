<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Austin House Hunting</title>
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@turf/turf@5/turf.min.js"></script>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <!-- Import jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <!-- Add mapbox gl geocoder plugin here -->
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.css"
      type="text/css"
    />
    <!-- Promise polyfill script required to use Mapbox GL Geocoder in IE 11 -->
    <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script>
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.2.0/mapbox-gl-geocoder.min.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.2.0/mapbox-gl-geocoder.css"
      type="text/css"
    />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

    <style>
      body {
        margin: 0;
        padding: 0;
      }

      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }

      /* #geocoder-container > div {
        min-width: 50%;
        margin-left: 25%;
      } */
      #menu {
        background: #fff;
        position: absolute;
        z-index: 1;
        bottom: 60px;
        left: 10px;
        border-radius: 3px;
        width: 120px;
        border: 1px solid rgba(0, 0, 0, 0.4);
        font-family: "Open Sans", sans-serif;
      }

      #menu a {
        font-size: 13px;
        color: #404040;
        display: block;
        margin: 0;
        padding: 0;
        padding: 10px;
        text-decoration: none;
        border-bottom: 1px solid rgba(0, 0, 0, 0.25);
        text-align: center;
      }

      #menu a:last-child {
        border: none;
      }

      #menu a:hover {
        background-color: #f8f8f8;
        color: #404040;
      }

      #menu a.active {
        background-color: #3887be;
        color: #ffffff;
      }

      #menu a.active:hover {
        background: #3074a4;
      }

      /* Housing Prices Legend  */

      .legend {
        background-color: #fff;
        border-radius: 3px;
        bottom: 40px;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        font: 12px/20px "Helvetica Neue", Arial, Helvetica, sans-serif;
        padding: 10px;
        position: absolute;
        right: 10px;
        z-index: 1;
      }

      .legend h4 {
        margin: 0 0 10px;
      }

      .legend div span {
        border-radius: 50%;
        display: inline-block;
        height: 10px;
        margin-right: 5px;
        width: 10px;
      }
      /* Hover over neighborhood overlay */

      .map-overlay {
        position: absolute;
        top: 60px;
        right: 0px;
        background: rgba(255, 255, 255, 0.8);
        margin-right: 10px;
        font-family: "Helvetica Neue", Arial;
        padding: 10px;
        overflow: auto;
        border-radius: 7px;
      }
    </style>

    <nav id="menu"></nav>
  </head>
  <body>
    <div id="map"></div>

    <!-- Housing Prices Legend -->
    <div id="legend" class="legend">
      <h4>Home Value</h4>
      <div><span style="background-color: #723122"></span>$900,000</div>
      <div><span style="background-color: #8B4225"></span>$800,000</div>
      <div><span style="background-color: #A25626"></span>$700,000</div>
      <div><span style="background-color: #B86B25"></span>$600,000</div>
      <div><span style="background-color: #CA8323"></span>$500,000</div>
      <div><span style="background-color: #DA9C20"></span>$400,000</div>
      <div><span style="background-color: #E6B71E"></span>$350,000</div>
      <div><span style="background-color: #EED322"></span>$300,000</div>
      <div><span style="background-color: #F2F12D"></span>$200,000</div>
    </div>

    <div class="map-overlay" id="features">
      <h2>Estimated Home Value</h2>
      <div id="hv"><p>Hover over a neighborhood</p></div>
    </div>

    <script>
      // Initialize the map
      mapboxgl.accessToken =
        "pk.eyJ1IjoiZGFuc3dpY2siLCJhIjoiY2swb2g4Z3hqMGFzYTNjbXdxc3F6dWZlaSJ9.Jo1SOIQUg0JV6HK4wEv36w";
      var map = new mapboxgl.Map({
        container: "map", // container id
        style: "mapbox://styles/mapbox/streets-v11", // stylesheet location
        center: [-97.722, 30.299], // starting position [lng, lat]
        zoom: 11 // starting zoom
      });

      //Add Layers ------------------------------------------------------------------------------------------------------------------------------------------

      //add geojsons

      var neighborhood_geo =
        "https://raw.githubusercontent.com/ninatrue/project/master/updated_neighborhoods1";
      var brew_geo =
        "https://raw.githubusercontent.com/ninatrue/project/master/Breweries";
      var market_geo =
        "https://raw.githubusercontent.com/ninatrue/project/master/Markets";
      var music_geo =
        "https://raw.githubusercontent.com/ninatrue/project/master/Music";

      //Add Neighborhoods Layer

      map.on("load", function() {
        map.addSource("Neighborhoods", {
          type: "geojson",
          data: neighborhood_geo
        });

        //display on map
        map.addLayer({
          id: "Neighborhoods",
          type: "fill",
          source: "Neighborhoods",
          //create a chloropleth map based on 2019 estimated home value
          paint: {
            "fill-color": [
              "interpolate",
              ["linear"],
              ["get", "HousingPri"],
              0,
              "#F2F12D",
              300000,
              "#EED322",
              350000,
              "#E6B71E",
              400000,
              "#DA9C20",
              500000,
              "#CA8323",
              600000,
              "#B86B25",
              700000,
              "#A25626",
              800000,
              "#8B4225",
              900000,
              "#723122"
            ],
            "fill-opacity": 0.4
          }
        });
      });

      //Add breweries Layer
      map.on("load", function() {
        map.addSource("Breweries", {
          type: "geojson",
          data: brew_geo
        });

        //display on map
        map.addLayer({
          id: "Breweries",
          type: "symbol",
          source: "Breweries",
          layout: {
            "icon-image": "beer-15"
          }
        });
      });

      //Add farmers markets layer

      map.on("load", function() {
        map.addSource("Markets", {
          type: "geojson",
          data: market_geo
        });

        //display on map
        map.addLayer({
          id: "Markets",
          type: "symbol",
          source: "Markets",
          layout: {
            "icon-image": "garden-15"
          }
        });
      });

      //Add music Venue layer
      map.on("load", function() {
        map.addSource("Music", {
          type: "geojson",
          data: music_geo
        });

        //display on map
        map.addLayer({
          id: "Music",
          type: "symbol",
          source: "Music",
          layout: {
            "icon-image": "music-15"
          }
        });
      });

      //Popups -----------------------------------------------------------------------------------------------------------------------------------------------

      //add popup when brewery Layer is clicked that displays name of venue and description
      map.on("click", "Breweries", function(e) {
        var brewpop = e.features[0].properties.name;
        var brewpop_d = e.features[0].properties.field_4;

        new mapboxgl.Popup()
          .setLngLat(e.lngLat)
          .setHTML("<h4>" + brewpop + "<h5>" + brewpop_d) //need to work on making description not bold
          .addTo(map);
      });

      //add popup when Music Layer is clicked that displays name of venue and description
      map.on("click", "Music", function(e) {
        var musicpop = e.features[0].properties.Name;
        var musicpop_d = e.features[0].properties.Web_Notes;

        new mapboxgl.Popup()
          .setLngLat(e.lngLat)
          .setHTML("<h4>" + musicpop + "<h5>" + musicpop_d) //need to work on making description not bold
          .addTo(map);
      });

      //Add hover effect -------------------------------------------------------------------------------------------------------------------------------------
      map.on("mousemove", function(e) {
        var prices = map.queryRenderedFeatures(e.point, {
          layers: ["Neighborhoods"]
        });

        if (prices.length > 0) {
          document.getElementById("hv").innerHTML =
            "<h3><strong>" +
            prices[0].properties.name +
            "</strong></h3><p><strong><em>" +
            prices[0].properties.HousingPri +
            "</strong> Home Value </em></p>";
        } else {
          document.getElementById("hv").innerHTML =
            "<p>Hover over a neighborhood</p>";
        }
      });

      //Add search bar -------------------------------------------------------------------------------------------------------------------------------------------
      map.on("load", function() {
        var geocoder = new MapboxGeocoder({
          // Initialize the geocoder
          accessToken: mapboxgl.accessToken, // Set the access token
          mapboxgl: mapboxgl, // Set the mapbox-gl instance
          zoom: 15, // Set the zoom level for geocoding results
          placeholder: "Search addresses in Austin" // This placeholder text will display in the search bar
        });

        // Add the geocoder to the map
        map.addControl(geocoder, "top-right"); // Add the search box to the top right
      });

      var marker = new mapboxgl.Marker({ color: "#008000" });

      geocoder.on("result", function(ev) {
        var searchResult = ev.result.geometry;
        var options = { units: "miles" };
        stores.features.forEach(function(brew) {
          Object.defineProperty(brew.properties, "distance", {
            value: turf.distance(searchResult, brew.geometry, options),
            writable: true,
            enumerable: true,
            configurable: true
          });
        });
      });

      //     // When the map has finished loading, add a new layer that will be empty
      // // at first, but will eventually house our confirmed alien landing sites.
      // map.on('load', function () {
      //   map.addLayer({
      //     id: 'alien-truth',
      //     source: {
      //       type: 'geojson',
      //       data: { "type": "FeatureCollection", "features": [] }
      //     },
      //     type: 'circle',
      //     paint: {
      //       'circle-color': 'green',
      //       'circle-radius': 10,
      //       'circle-opacity': 0.5
      //     },
      //   }, 'country-label');

      //   // Draw the alien search radius on the map
      //   map.addLayer({
      //     id: 'search-radius',
      //     source: {
      //       type: 'geojson',
      //       data: { "type": "FeatureCollection", "features": [] }
      //     },
      //     type: 'fill',
      //     paint: {
      //       'fill-color': '#555',
      //       'fill-opacity': 0.1
      //     }
      //   }, 'country-label');
      // });

      // // When the user clicks, find all of the points that fall within a given radius
      // // Add those points to the confirmed landing site.
      // map.on('click', function (e) {
      //   // Store the click event's coordinate array as a variable.
      //   var eventLngLat = [e.lngLat.lng, e.lngLat.lat];
      //   // Use the makeRadius() function to generate the search radius as a GeoJSON polygon
      //   var searchRadius = makeRadius(eventLngLat, 15000);
      //   // Use the spatialJoin() function to find sites that fall within the search radius
      //   // and have a property that matches the criteria for a confirmed site.
      //   var featuresInBuffer = spatialJoin(geojson, searchRadius);

      //   // Set the alien truth map source's data to our newly filtered set of features
      //   map.getSource('alien-truth').setData(turf.featureCollection(featuresInBuffer));
      //   // Draw the search radius on the map
      //   map.getSource('search-radius').setData(searchRadius);
      // });

      // /****** UTILITY FUNCTIONS *******/
      // function makeRadius(lngLatArray, radiusInMeters) {
      //   // We need to turn our click location into a point feature before we can do calculations on it
      //   var point = turf.point(lngLatArray);
      //   // Use turf's buffer function to make a polygon that around the clicked point
      //   var buffered = turf.buffer(point, radiusInMeters, { units: 'meters' });

      //   return buffered;
      // }

      // function spatialJoin(sourceGeoJSON, filterFeature) {
      //   // Loop through all of the features and return the ones that
      //   // are inside the buffer and are confirmed landing sites
      //   var joined = geojson.features.filter(function (feature) {
      //     return turf.booleanPointInPolygon(feature, filterFeature) && feature.properties.isAlien === 'yes';
      //   });

      //   return joined;
      // }

      //   geocoder.on("result", function(e) {
      //     var point = e.result.center; // Capture the result coordinates
      //     var marker = new mapboxgl.Marker({ color: "#008000" }); // Add the marker to the map at the result coordinates
      //     marker.setLngLat(point).addTo(map);
      //     var searchRadius = makeRadius(marker, 1609); // 1609 meters is roughly equal to one mile
      //     var featuresInBuffer = spatialJoin(brew_geo, radius);
      //     // Set the alien truth map source's data to our newly filtered set of features
      //     map
      //       .getSource("brew-truth")
      //       .setData(turf.featureCollection(featuresInBuffer));
      //     // Draw the search radius on the map
      //     map.getSource("search-radius").setData(searchRadius);
      //   });
    </script>
  </body>
</html>
